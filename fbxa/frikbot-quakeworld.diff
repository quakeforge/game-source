diff --git a/quakeworld/Makefile b/quakeworld/Makefile
index aa22357c6..b378efce7 100644
--- a/quakeworld/Makefile
+++ b/quakeworld/Makefile
@@ -1,5 +1,7 @@
 all: qwprogs.dat
-qwprogs.dat: progs.src *.qc
-	qfcc --ruamoko -Cno-promote-float,vector-components,const-initializers -Werror -Wall -O
+qwprogs.dat: qwprogs.o
+	qfcc -g -o qwprogs.dat qwprogs.o -lfrikbot -lr -lqw
+qwprogs.o: progs.src *.qc
+	qfcc --ruamoko -Cno-promote-float,vector-components,const-initializers -Werror -Wall -Dself=@self -O -g -c -o qwprogs.o
 clean:
-	rm -f core *.dat *.sym progdefs.h *.p *.i1 *.i2
+	rm -f core *.dat *.sym progdefs.h *.p *.i1 *.i2 *.o
diff --git a/quakeworld/client.qc b/quakeworld/client.qc
index 0a2a7ecfe..08e71a967 100644
--- a/quakeworld/client.qc
+++ b/quakeworld/client.qc
@@ -773,6 +773,7 @@ Called every frame before physics are run
 void ()
 PlayerPreThink =
 {
+	BotPreFrame ();
 	if (intermission_running) {
 		IntermissionThink ();   // otherwise a button could be missed between
 		return;                                 // the think tics
@@ -970,6 +971,8 @@ Called every frame after physics are run
 void ()
 PlayerPostThink =
 {
+	BotImpulses ();
+
 //	dprint ("post think\n");
 	if (self.view_ofs == '0 0 0')
 		return;         // intermission or finale
@@ -1005,6 +1008,8 @@ called when a player connects to a server
 void ()
 ClientConnect =
 {
+	ClientInRankings ();
+
 	bprint (PRINT_HIGH, self.netname);
 	bprint (PRINT_HIGH, " entered the game\n");
 
@@ -1023,6 +1028,8 @@ called when a player disconnects from a server
 void ()
 ClientDisconnect =
 {
+	ClientDisconnected ();
+
 	// let everyone else know
 	bprint (PRINT_HIGH, self.netname);
 	bprint (PRINT_HIGH, " left the game with ");
diff --git a/quakeworld/defs.qc b/quakeworld/defs.qc
index 45931b5a0..a735d7160 100644
--- a/quakeworld/defs.qc
+++ b/quakeworld/defs.qc
@@ -1,9 +1,10 @@
+#include <frikbot.h>
 // SOURCE FOR GLOBALVARS_T C STRUCTURE ========================================
 #if __RUAMOKO__ > 1
 #pragma math vector_mult @dot
 #endif
 // system globals
-entity          self;
+//entity          self;
 entity          other;
 entity          world;
 float           time;
@@ -520,7 +521,7 @@ void(entity e, string m) setmodel       = #3;           // set movetype and soli
 void(entity e, vector min, vector max) setsize = #4;
 //void() break                                            = #6;
 float() random                                          = #7;           // returns 0 - 1
-void(entity e, float chan, string samp, float vol, float atten) sound = #8;
+//void(entity e, float chan, string samp, float vol, float atten) sound = #8;
 vector(vector v) normalize                      = #9;
 void(string e) error                            = #10;
 void(string e) objerror                         = #11;
@@ -536,7 +537,7 @@ void(entity e) remove                           = #15;
 // a forent of world is ignored
 void(vector v1, vector v2, float nomonsters, entity forent) traceline = #16;    
 entity() checkclient                            = #17;  // returns a client to look for
-entity(entity start, .string fld, string match) find = #18;
+entity(entity start, ...) find = #18;
 string(string s) precache_sound         = #19;
 string(string s) precache_model         = #20;
 void(entity client, string s)stuffcmd = #21;
@@ -544,8 +545,8 @@ entity(vector org, float rad) findradius = #22;
 void(float level, string s) bprint                              = #23;
 void(entity client, float level, string s) sprint = #24;
 void(string s) dprint                           = #25;
-string(float f) ftos                            = #26;
-string(vector v) vtos                           = #27;
+@extern string (float f) ftos;
+@extern string(vector v) vtos;
 void() coredump                                         = #28;          // prints all edicts
 void() traceon                                          = #29;          // turns statment trace on
 void() traceoff                                         = #30;
@@ -559,7 +560,7 @@ float(float v) ceil                                     = #38;          // small
 float(entity e) checkbottom                     = #40;          // true if self is on ground
 float(vector v) pointcontents           = #41;          // returns a CONTENT_*
 float(float f) fabs = #43;
-vector(entity e, float speed) aim = #44;                // returns the shooting vector
+//vector(entity e, float speed) aim = #44;                // returns the shooting vector
 float(string s) cvar = #45;                                             // return cvar.value
 void(string s) localcmd = #46;                                  // put string into local que
 entity(entity e) nextent = #47;                                 // for looping through all ents
@@ -595,13 +596,13 @@ string(string s) precache_model2        = #75;          // registered version on
 string(string s) precache_sound2        = #76;          // registered version only
 string(string s) precache_file2         = #77;          // registered version only
 
-void(entity e) setspawnparms            = #78;          // set parm1... to the
+//void(entity e) setspawnparms            = #78;          // set parm1... to the
 												// values at level start
 												// for coop respawn
 void(entity killer, entity killee) logfrag = #79;       // add to stats
 
 string(entity e, string key) infokey    = #80;  // get a key value (world = serverinfo)
-float(string s) stof                            = #81;          // convert string to float
+@extern float(string s) stof;
 void(vector where, float set) multicast = #82;  // sends the temp message to a set
 												// of clients, possibly in PVS or PHS
 
diff --git a/quakeworld/world.qc b/quakeworld/world.qc
index 8f350f5a6..6922c0d45 100644
--- a/quakeworld/world.qc
+++ b/quakeworld/world.qc
@@ -17,6 +17,8 @@ World Types:
 void ()
 worldspawn =
 {
+	BotInit ();
+
 	lastspawn = world;
 	InitBodyQueue ();
 
@@ -189,6 +191,8 @@ worldspawn =
 void ()
 StartFrame =
 {
+	BotFrame ();
+
 	timelimit = cvar ("timelimit") * 60;
 	fraglimit = cvar ("fraglimit");
 	teamplay = cvar ("teamplay");
